package chanswitch

import (
	"context"
	"fmt"
	"runtime"
	"sync"
)

type Channels struct {
	open chan struct{}
	once chan struct{}
}

type ChanSwitch struct {
	filters  map[any]*Channels
	val      any
	distract chan struct{}
	// l        sync.RWMutex
}

func (b *ChanSwitch) currentChan() chan struct{} {
	if c := b.filters[b.val]; c != nil {
		return c.open
	}

	empty := make(chan struct{})
	// defer close(empty)

	return empty
}

func repeater(b *ChanSwitch) {

	for {
		select {
		case b.currentChan() <- struct{}{}:
		case <-b.distract:
		}
	}

}
func New(vals ...any) *ChanSwitch {
	b := &ChanSwitch{
		filters:  make(map[any]*Channels),
		distract: make(chan struct{}, 1),
		// l:        sync.RWMutex{},
	}

	go repeater(b)

	for _, v := range vals {
		b.Make(v)
	}

	return b
}

func NewBool() *ChanSwitch {
	return New(true, false)
}

func (b *ChanSwitch) Make(v any) *Channels {
	if chs := b.read(v); chs == nil {
		ch := &Channels{
			open: make(chan struct{}, 1),
			once: make(chan struct{}, 1),
		}
		b.set(v, ch)
		return ch
	} else {
		return chs
	}
}

// set filed value
func (b *ChanSwitch) Set(v any) {
	// b.l.Lock()
	// defer b.l.Unlock()
	// get filter by value
	ch := b.filters[v]
	// if b.val == "shutdown" && v != "shutdown" {
	// 	fmt.Println("trying to set: ", v)
	// }
	// update val
	b.val = v
	// distract repeated goroutines for change filter
	b.distract <- struct{}{}

	// reset once channel
	activeChan(ch.once)

	// deactive channel got other value
	for k, c := range b.filters {
		if v != k {
			if len(c.open) > 0 {
				// if k == "shutdown" {
				// 	fmt.Println("closing shutdown by setting: ", v)
				// }
				// close once channel of old filter
				closeChan(c.once)
				// close open channel of old filter
				closeChan(c.open)

			}
		}
	}
}

// thread safe wait until this field change to true
func (b *ChanSwitch) WaitFor(ctx context.Context, v any) {
	ch := b.read(v)
	if ch == nil {
		panic(fmt.Sprintf("value not set : %v", v))
	}

	select {
	case <-ctx.Done():
	case <-ch.open:
		// b.l.Lock()
		activeChan(ch.open)
		// b.l.Unlock()
	}

}

// check whether this field is true or not
func (b *ChanSwitch) On(vals ...any) chan struct{} {
	if len(vals) == 0 {
		panic("values not set")
	}

	if len(vals) == 1 {
		v := vals[0]
		ch := b.read(v)
		if ch == nil {
			panic(fmt.Sprintf("value not set : %v", v))
		}

		return ch.open
	}

	stop := make(chan struct{})
	agg := make(chan struct{}, 1)
	l := &sync.Mutex{}

	for _, v := range vals {
		go func(val any) {
			ch := b.read(val)
			if ch == nil {
				panic(fmt.Sprintf("value not set : %v", val))
			}

			select {
			case <-ch.open:
				l.Lock()
				if len(agg) == 0 {
					activeChan(agg)

					closed := isClosed(stop)
					if !closed {
						close(stop)
					}
				}
				l.Unlock()
				return
			case <-stop:
				return
			}
		}(v)
	}

	return agg
}

func isClosed(stop chan struct{}) bool {
	ok := true
	select {
	case _, ok = <-stop:
	default:
	}
	return ok
}

func (b *ChanSwitch) Once(v any) <-chan struct{} { // Running Once
	ch := b.read(v)
	if ch == nil {
		panic(fmt.Sprintf("value not set : %v", v))
	}

	return ch.once
}

// func (b *ChanSwitch) OnChange(v any) <-chan struct{} { // Running Once
// 	ch := b.read(v)
// 	if ch == nil {
// 		panic(fmt.Sprintf("value not set : %v", v))
// 	}

// }

func (b *ChanSwitch) read(v any) *Channels {
	// b.l.RLock()
	c := b.filters[v]
	// b.l.RUnlock()
	return c
}

func (b *ChanSwitch) set(v any, ch *Channels) {
	// b.l.Lock()
	b.filters[v] = ch
	// b.l.Unlock()
}

func (b *ChanSwitch) Value() any {
	return b.val
}

func (b *ChanSwitch) Values() []any {
	keys := make([]any, 0, len(b.filters))
	for k := range b.filters {
		keys = append(keys, k)
	}
	return keys
}

// func (b *ChanSwitch) log(v any, format string, a ...any) {
// 	if b.val == v || v == "any" {
// 		fmt.Printf(format+"\n", a...)
// 	}
// }

func activeChan(c chan struct{}) {
	select {
	case c <- struct{}{}:
	default:
	}
}

func closeChan(c chan struct{}) {
	select {
	case <-c:
	default:
	}
}

func printAlloc(msg ...string) {
	var m runtime.MemStats
	runtime.ReadMemStats(&m)
	fmt.Printf("%d MB "+fmt.Sprint(" ", msg)+"\n", m.Alloc/(1024*1024))
}
